import './index.css'
import React, { useEffect, useState } from 'react'
import { render } from 'react-dom'
import { Framerule } from './components/Framerule/Framerule'
import { changeFnNumber, useLocalState } from './utils';

let IMAGE_URL = 'http://localhost:8001';
if (process.env.NODE_ENV === 'production') {
    IMAGE_URL = '../bowserframes-screenshots';
}

// really basic parsed querystring, we want to be able to use the 'fr' and 'delay' values from the query to determine which 8-4 into to show!
const querystring = location.search.substring(1).split('&').map(x => x.split('=')).reduce((ht, [k, v]) => { ht[k] = v; return ht; }, {})
if ('fr' in querystring) localStorage['fr'] = JSON.stringify(Number(querystring.fr));
if ('delay' in querystring) localStorage['delay'] = JSON.stringify(Number(querystring.delay));
if ('pup' in querystring) localStorage['pup'] = JSON.stringify(Number(querystring.pup));

// how many images were generated by the script per rng
const imagesPerFrame = 105 - 61;
// duration of an NES frame in milliseconds
const frameMillis = 16.639263492063357;
// there are 21 frames in a framerule!
const frameruleFrames = 21;
const frameruleMillis = frameruleFrames * frameMillis;
// how many milliseconds the smb startup sequence takes in a multicart 
const smbStartupMillis = 130.5;
// first possible framerule to enter the game
const startingFramerule = 9;

const App = () => {
    const [fr, setFr] = useLocalState("fr", 743); // 765
    const [delay, setDelay] = useLocalState("delay", 11);
    const [page, setPage] = useState(0);
    const [powerup, setPowerup] = useLocalState("pup", 0);
    const [videoIndex, setVideoIndex] = useState(imagesPerFrame);
    
    // figure out which framerule we started the game on 
    const level1EntranceFramerule = delay + startingFramerule;
    // convert startup delay timer 
    const delayMillis = (smbStartupMillis + (level1EntranceFramerule * frameruleMillis));
    const delaySeconds = ((delayMillis / 10) | 0) / 100;
    // the starting frame of the run
    let runStartedFrame = (startingFramerule + Number(delay)) * frameruleFrames;

    const setFrV = (v) => setFr(Math.max(0, Math.min(999999, v)));
    const setDelayV = (v) => setDelay(Math.max(0, Math.min(9999, v)));
    const reducePage = v => setPage(ofs => Math.max(-9999, ofs - 1));
    const increasePage = v => setPage(ofs => Math.min(9999, ofs + 1));

    return <div>
        <div style={{ maxWidth: '400px', margin: 'auto', display: 'flex', justifyContent: 'center', alignItems: 'flex-end', marginBottom: '12px'}}>
            <div style={{ display: 'flex', alignItems: 'flex-end', gap: '8px' }}>
            <label>
                <div>8-4 Framerule</div>
                <input type="number" value={fr} onInput={changeFnNumber(setFrV)} />
            </label>
            <label>
                <div>Delay ({delaySeconds}s)</div>
                <input type="number" value={delay} onInput={changeFnNumber(setDelayV)} />
            </label>
            <label>
                <div>Powerups</div>
                <select value={powerup} onChange={changeFnNumber(setPowerup)}>
                    <option value={0}>None</option>
                    <option value={1}>Big fire</option>
                    <option value={2}>Small fire</option>
                </select>
            </label>
            </div>
        </div>
        <div style={{ maxWidth: '400px', margin: '12px auto', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <button onClick={reducePage}>Faster</button>
            <span style={{ lineHeight: 1 }}>Page {page}</span>
            <button onClick={increasePage}>Slower</button>
        </div>
        <Framerule powerup={powerup} videoIndex={videoIndex} setVideoIndex={setVideoIndex} fr={fr + page} runStartedFrame={runStartedFrame} />
        <div style={{ maxWidth: '400px', margin: 'auto', display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexDirection: 'column' }}>
            <div>
                <a style={{ color: 'white', opacity: 0.5 }} href={`${location.href.replace(/\?.*/, '')}?page=${page}&pup=${powerup}&fr=${fr}&delay=${delay}`}>Permalink</a>
            </div>
        </div>
    </div>;
};

render(<App />, document.getElementById('app'));
