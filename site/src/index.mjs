import { html, neverland, render, useEffect, useState } from 'neverland'
import Duration from 'luxon/src/duration'
import validFrames from '../valid-frames.json'

let IMAGE_URL = 'http://localhost:8000';
if (process.env.NODE_ENV === 'production') {
    IMAGE_URL = '../bowserframes-screenshots';
}

const changeFnNumber = fn => evt => fn(Number(evt.target.value));

// how many images were generated by the script per rng
const imagesPerFrame = 105;
// duration of an NES frame in milliseconds
const frameMillis = 16.639263492063357;
// there are 21 frames in a framerule!
const frameruleFrames = 21;
const frameruleMillis = frameruleFrames * frameMillis;
// how many milliseconds the smb startup sequence takes in a multicart 
const smbStartupMillis = 130.5;
// this number is an offset to convert the rng offset to the exported folder names. trial and error..
const rngBaseOffset = 2248;
// the number of frames before the rng loops back on itself
const rngWraparound = 0x7FFF;
// how many framerules we should offset the selected 8-4 by to arrive at the bowser room
const bowserroomFrameruleOffset = 110;
// how many frames it takes to get through an optimal bowser room
const bowserroomFrames = 437;
// first possible framerule to enter the game
const startingFramerule = 9;

// store a state value in localStorage to preserve it between page views
const useLocalState = (name, initialValue) => {
    const [value, setValue] = useState(localStorage[name] === undefined ? initialValue : JSON.parse(localStorage[name]));
    useEffect(() => { localStorage[name] = JSON.stringify(value); }, [value]);
    return [value, setValue];
}

// find the full path to the rng images
const getRNGImage = (frame, imageNumber) => {
    let folderName = frame.toString().padStart(6, '0');
    return `${IMAGE_URL}/seed-${folderName}/${imageNumber.toString().padStart(3, '0')}.png`
}

const App = neverland(() => {
    const [fr, setFr] = useLocalState("fr", 743); // 765
    const [delay, setDelay] = useLocalState("delay", 11);
    const [offset, setOffset] = useState(0);
    const [image, setImage] = useState(imagesPerFrame);
    
    // figure out which framerule we started the game on 
    const level1EntranceFramerule = delay + startingFramerule;
    // convert startup delay timer 
    const delaySeconds = Duration.fromMillis(smbStartupMillis + (level1EntranceFramerule * frameruleMillis)).toFormat("s.SS");
    // figure out the first rng seed folder to use for the current page.
    const startingRNGOffset = rngBaseOffset + ((fr + offset) * frameruleFrames);
    // the starting frame of the run
    let startingFrame = (startingFramerule + Number(delay)) * frameruleFrames;

    // get an estimate for the total run time for a given bowser frame.
    const estimateTime = i => {
        // the ending time of the run
        let endingFrame = startingRNGOffset + bowserroomFrames + i;
        // figure out the exact millisecond time of the run
        let millis = Math.ceil((endingFrame - startingFrame) * frameMillis);
        // and convert to a friendly string
        return Duration.fromMillis(millis).toFormat("m:ss.SSS");
    }

    // converts a leniency value from the tas to a text description.
    const estimateLeniency = l => {
        if (l === -1) return html`<span style="color:green">Forward</span>`;
        if (l < 1) return html`<span style="color:red">Impossible</span>`;
        if (l == 1) return html`<span style="color:red">Frame perfect</span>`;
        if (l < 4) return html`<span style="color:red">${l} frames</span>`;
        if (l < 8) return html`<span style="color:orange">${l} frames</span>`;
        if (l >= 8) return html`<span style="color:green">Safe</span>`;
        return html`<span style="color:gray">Unmapped</span>`;
    }

    const setFrV = (v) => setFr(v > 0 ? v : 743);
    const setDelayV = (v) => setDelay(Math.max(0, Math.min(1000, v)));
    const setImageV = v => setImage(Math.min(imagesPerFrame, Math.max(v, 0)));
    const reduceOffset = v => setOffset(ofs => ofs - 1);
    const increaseOffset = v => setOffset(ofs => ofs + 1);

    let images = [];
    for (let i=0; i<frameruleFrames; ++i) {
        const startingFrame = (startingRNGOffset+i) % rngWraparound;
        const leniency = validFrames[startingFrame];
        // figure out the framerule number this page
        const bowserroomFramerule = bowserroomFrameruleOffset+fr+offset;
        // this is the value under the X in Pellsson that is being shown
        const bowserroomXValue = (frameruleFrames-1-i).toString(frameruleFrames).toUpperCase();
        
        images.push(html`<div style="background:rgba(0, 0, 0, 0.3);padding:8px;border-radius:8px;">
                <img style="margin:auto;max-width:256px;width:100%;display:block;" src=${getRNGImage(startingFrame, image)} />
                <div style="text-align:center;margin-top:8px;">
                    ${bowserroomFramerule}-${bowserroomXValue}
                </div>
                <div style="text-align:center;">${estimateTime(i)}</div>
                <div style="text-align:center;">${estimateLeniency(leniency)}</div>
        </div>`);
    }
    return html`<div>
        <div style="max-width:400px;margin:auto;display:flex;justify-content:space-between;align-items:flex-end;margin-bottom:12px;">
            <label>
                <div>8-4 Framerule</div>
                <input type="number" value=${fr} onInput=${changeFnNumber(setFrV)} />
            </label>
            <label>
                <div>Starting delay (${delaySeconds}s)</div>
                <input type="number" value=${delay} onInput=${changeFnNumber(setDelayV)} />
            </label>
        </div>
        <div style="max-width:400px;margin:12px auto;display:flex;justify-content:space-between;align-items:center;">
            <button onClick=${reduceOffset}>Faster</button>
            <span style="line-height:1;">Page ${offset}</span>
            <button onClick=${increaseOffset}>Slower</button>
        </div>
        <div style="margin:32px auto;display:grid;grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr;gap:16px 8px;">
            ${images}
        </div>
        <div style="max-width:400px;margin:auto;display:flex;justify-content:space-between;align-items:center;">
            <label>
                <div>Frame</div>
                <input type="range" min="1" max=${imagesPerFrame} style="width:400px" value=${image} onChange=${changeFnNumber(setImageV)} />
            </label>
        </div>
    </div>`;
});

render(document.getElementById('app'), App);
